Speare {
  Program       = (Work | Statement)*
  Work          = Corollary | Composition
  Composition   = "Composition" Varname "{" Work* "}"                           --class
  Corollary     = enter type Varname "(" ListOf<Param, ","> ")" "{" Body "}"    --function
  Body          = (Statement | Work)*
  Statement     = ContFlow+
                | alloweth type Varname "be" LogicExp                           --variable
                | Varname "be" LogicExp                                         --assignment
                | speaketh "(" LogicExp ")"                                       --print
                | returneth RelExp?                                             --return
                | StatementFunctionCall                                         
                | Varname (incrementby | decrementby) RelExp                    --incdecby
                | Varname (increment | decrement)                               --incdec
                | break                                                         --break
  ContFlow      = if "(" LogicExp ")" "{" Body "}" ( elif "(" LogicExp ")" "{" Body "}" )* ( else "{" Body "}")? --complexconditional
                | switch Factor "{" (case Factor ":" Body )+ "}"                                 --switchcase
                | for "(" ForLoopVariable "," LogicExp "," ForLoopAction ")" "{" Body "}"      --forloop
                | while "(" LogicExp+ ")" "{" Body  "}"                     --while
                | do "{" Body "}" while "(" LogicExp+ ")"                --dowhile
  LogicExp      = LogicExp logicalop LogicExp                                       --logicalcombo
                | RelExp
  RelExp        = AddSub relop AddSub                                           --equality
                | AddSub                                                        --defer
  AddSub        = AddSub (subtraction | addition) MultDiv                       --addorsubtract
                | MultDiv                                                       --defer
  MultDiv       = MultDiv (multiplication | division | modulus) Exponentiate    --multordiv
                | Exponentiate
  Exponentiate  = Factor (exponentiate) Exponentiate                            --raisepower
                | Factor
  Factor        = StructureType
                | ArrayLookup
                | DictLookup
                | FunctionCall
                | "-"? Varname                                                   --variable
                | "(" LogicExp ")"                                                --parens
                | ("nay" | abs | sqrt)	"(" Factor ")"                          --unary
                | String
  

  // Statement Specific Grammar Features
  DictEntry              = AddSub colon AddSub
  ArrayLookup            = Varname ("[" AddSub "]")+
  DictLookup             = Factor "." AddSub
  FunctionCall           = Varname "(" ListOf<AddSub, ","> ")"
  StatementFunctionCall  = Varname "(" ListOf<AddSub, ","> ")"
  ForLoopVariable        = alloweth type Varname "be" LogicExp
  ForLoopAction          = Varname (increment | decrement)


  // Define ids for variables, params
  Varname             = id                             --string

  Param               = type Varname
              

  //Reserved keywords
  alloweth            = "alloweth" ~alnum
  speaketh            = "speaketh" 
  returneth           = "returneth"
  enter               = "enter"
  colon               = ":"

  type	              = "Liste of " type                                          --listdec
                      | "Concordance of " type " and " type                        --dictdec
                      | "Indistinguishable"
                      | "ToBeOrNotToBe"
                      | "Numeral"
                      | "Lexicographical"
                      | "Illused"
                      | "Ideogram"
                      | "Corollary"


  StructureType       = Indistinguishable
                      | Tobeornottobe
                      | Numeral
                      | Lexicographical
                      | Illused
                      | Liste
                      | Concordance

  // Type
  id                  = ~keyword letter alnum*            --name
  String              = ~keyword "\"" alnum* "\""        --string
  Indistinguishable	  = "indistinguishable" ~alnum
  Tobeornottobe	   	  =	"fallacious" | "faithful"         
  Numeral             = "-"? digit+ ("." digit+)?
  Liste               = "[" ListOf<AddSub, ","> "]"
  Concordance         = "{" ListOf<DictEntry, ","> "}"

  Lexicographical     = "\"" alnum "\""
  Illused             = "null"

  // Operations
  addition            = "with"
  subtraction         = "without"
  multiplication      = "accumulate"
  division            = "sunder"
  modulus             = "residue"
  exponentiate        = "exponentiate"
  abs                 = "absolutization" ~alnum
  sqrt                = "quadrangle" ~alnum
  composition         = "Composition" ~alnum

  // Relational and Logical operations
  relop               = "tis nobler"
                      | "tis not"
                      | "tis lesser"
                      | "tis"
                      | "nobler"
                      | "lesser"
  logicalop           = "furthermore"
                      | "alternatively"
                      | "nay"

  //Incrementing
  assignment		      = "be"
  increment           = "increment"
  incrementby         = "incrementby"
  decrement           = "decrement"
  decrementby         = "decrementby"

  // Control Flow
  if                  = "whether"
  elif                = "subsequently"
  else                = "otherwise"
  switch              = "trigger"
  case                = "condition"
  break               = "exit"
  while               = "whilst"
  do                  = "execute"
  for                 = "in regards to"
  in                  = "within"

  controlflow         = elif
                      | for
                      | if
                      | else
                      | switch
                      | case
                      | break
                      | while
                      | do
                      | in

  // Defining symbols
  ideogram            = addition
                      | subtraction
                      | multiplication
                      | division
                      | modulus
                      | assignment
                      | relop
                      | logicalop
                      | sqrt
                      | abs
                      | increment
                      | decrement

  // Defining Objects
  accommodation	      = type

   //Defining Reserved Words
  keyword             = ideogram ~alnum
                      | alloweth ~alnum
                      | returneth ~alnum
                      | speaketh ~alnum
                      | accommodation ~alnum
                      | composition ~alnum
                      | controlflow ~alnum

}